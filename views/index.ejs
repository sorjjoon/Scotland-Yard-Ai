<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Scotland Yard Ai</title>
    <link rel="stylesheet" href="/public/style.css" />
    <script src="/public/client.bundle.js"></script>

    <script src="/public/sigma.min.js"></script>
    <script src="/public/sigma.parsers.json.min.js"></script>
    <script src="/public/sigma.plugins.neighborhoods.min.js"></script>
  </head>

  <body>
    <main>
      <div id="main-wrapper">
        <div id="replay-header">
          <button id="replay-prev">Last Move</button>
          <span id="replay-turncounter"> Turn: </span>
          <span id="replay-player">Player to move: </span>
          <button id="replay-next">Next Move</button>
        </div>
        <div id="graph-container"></div>
      </div>
      <div id="side-wrapper">
        <div id="sidebar">
          <table id="game-start-info">
            <thead>
              <tr>
                <th scope="col">Role</th>
                <th scope="col">Played By</th>
              </tr>
            </thead>
            <tbody>
              <% players.forEach(function(player){ %>
              <tr>
                <td style="color: <%=player.color%>"><%= player.role %></td>
                <td>
                  <select class="ai-selector" id="ai-select-<%=player.id%>">
                    <% Object.keys(aiTypes).forEach(function(key){ %>
                    <option value="<%=aiTypes[key]%>" selected="selected"><%=key%></option>
                    <% }); %>
                  </select>
                </td>
              </tr>
              <% }); %>
            </tbody>
          </table>
          <span class="header"> Game variables </span>
          <table>
            <header>

            </header>
            <thead>
              <tr>
                <th scope="col">Value</th>
                <th scope="col">Explanation</th>
              </tr>

            </thead>
            <tbody>
              <tr>
                <td>
                  <input id="playout-debug" type="checkbox" value="Show playout debug info" checked="" />
                </td>
                <td>
                  <label for="playout-debug"> Show playout debug info</label>
                </td>
              </tr>
              <tr>
                <td>
                  <input id="detectives-see-x" type="checkbox" value="detectives-see-x"  />
                </td>
                <td>
                  <label for="detectives-see-x"> Detectives can always see X</label>
                </td>
              </tr>
              <tr>
                <td>
                  <button onclick="lib.startGame()">Start game</button>
                </td>
              </tr>
            </tbody>
          </table>
              
              
          </table>
        </div>
        <div id="edge-selector">
          <span> Visible routes </span>
          <table>
            <!-- Form is here just to remove autocomplete on firefox -->
            <form id="dummy" autocomplete="off">
              <tbody>
                <tr>
                  <td>
                    <input id="taxi" type="checkbox" value="1" checked="" oninput="lib.updateVisibleEdges()" />
                    <label for="taxi"> Taxi</label>
                  </td>
                  <td >
                    <input id="bus" type="checkbox" value="1" checked="" oninput="lib.updateVisibleEdges()" />
                    <label for="bus"> Bus</label>
                  </td>
                  <td ">
                    <input id="metro" type="checkbox" value="1" checked="" oninput="lib.updateVisibleEdges()" />
                    <label for="metro"> Metro</label>
                  </td>
                </tr>
              </tbody>
            </form>
          </table>
        </div>
      </div>
    </main>

    <script>
      var players = <%-JSON.stringify(players)%>;
      window.addEventListener("load",lib.fetchGraph())
      //Adding a method for finding a node's edges
      sigma.classes.graph.addMethod("adjacentEdges", function (id) {
        id = Number(id);
        //@ts-ignore
        var a = this.allNeighborsIndex[id],
          eid,
          target,
          edges = [];

        for (target in a) {
          for (eid in a[target]) {
            edges.push(a[target][eid]);
          }
        }
        return edges;
      });
      sigma.classes.graph.addMethod("adjacentNodes", function (id) {
        id = String(id)
        //@ts-ignore
        let edges = this.adjacentEdges(id)
        let nodes = []
        let ids = []
        for(let t of edges) {
          if(t.source == id && t.target != id && !ids.includes(t.target)) {
            nodes.push(window.lib.lookupNodeById(t.target))
            ids.push(t.target)
          }
          if(t.target == id && t.source != id && !ids.includes(t.source)) {
            nodes.push(window.lib.lookupNodeById(t.source))
            ids.push(t.source)
          }
        }
        return nodes;
      });
    </script>
  </body>
</html>
